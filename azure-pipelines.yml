trigger:
  branches:
    include:
    - '*'
  tags:
    include:
      - v*

stages:
- stage: static_checks
  displayName: Static Checks
  dependsOn: []
  jobs:
    - job: typechecking
      displayName: 'Typechecking'
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
      - task: UsePythonVersion@0
        inputs:
          versionSpec: '3.7'
      - script: |
          python -m pip install -U mypy==0.730
          mypy blocklib --ignore-missing-imports --no-implicit-optional --disallow-untyped-calls
        displayName: 'mypy (pinned)'

      - script: |
          python -m pip install -U mypy
          mypy blocklib --ignore-missing-imports --no-implicit-optional --disallow-untyped-calls
        displayName: 'mypy (latest)'
        continueOnError: True

    - job: check for tag
      displayName: "Check for Git tags"
      steps:
      # In this step, if this build is triggered by a tag, it will add the tag 'doRelease' to the current build. This tag
      # is used to trigger the release pipeline.
      - script: echo "##vso[build.addbuildtag]doRelease"
        condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')

- stage: test_and_build
  displayName: 'Test and build'
  dependsOn: []
  jobs:
  - job: testnbuild
    displayName: Linux
    strategy:
      matrix:
        python36:
          PYTHON_VERSION: '3.6'
        python37:
          PYTHON_VERSION: '3.7'
        python38:
          PYTHON_VERSION: '3.8'
        python39:
          PYTHON_VERSION: '3.9'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(PYTHON_VERSION)
    - script: |
        pip install -U pip
        pip install -U -r requirements.txt
      displayName: 'Install requirements'
    - script: |
        pytest --cov=blocklib --junitxml=testResults.xml  --cov-report=xml:coverage.xml
      displayName: 'Tests'


    # Test tutorial jupyter notebooks
    - script:
        pip install -e .
    - script:
        python -m pip install -U -r docs/doc-requirements.txt
    - script:
        pytest --nbval docs/tutorial

    # Send report to codecov
    - bash: |
        pip install -U pip codecov
        report_name="ubuntu18-04_$(PYTHON_VERSION)"
        python -m codecov --token $(CODECOV_TOKEN) \
          --file coverage.xml \
          -n ${report_name}
      displayName: 'Send coverage to codecov'
      condition: succeededOrFailed()

- stage: package
  displayName: Build Wheel Packages
  dependsOn: ['test_and_build']
  jobs:
    - job: linux
      pool: {vmImage: 'Ubuntu-16.04'}
      strategy:
        matrix:
          Python36:
            python.version: '3.6'
          Python37:
            python.version: '3.7'
          Python38:
            python.version: '3.8'
          Python39:
            python.version: '3.9'

      steps:
        - task: UsePythonVersion@0
          inputs:
            versionSpec: '$(python.version)'
          displayName: 'Use Python $(python.version)'

        - script:
            pip install wheel
          displayName: 'Install wheel'

        # artifact creation
        - script:
            python setup.py sdist bdist_wheel
          displayName: 'Artifact creation'

        # copy artifact
        - task: CopyFiles@2
          inputs:
            targetFolder: $(Build.ArtifactStagingDirectory)

        # publish artifact
        - task: PublishBuildArtifacts@1
          inputs:
            PathtoPublish: '$(Build.ArtifactStagingDirectory)'
            ArtifactName: 'dist'
            publishLocation: 'Container'